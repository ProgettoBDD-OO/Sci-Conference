-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.collocazioni
(
    id_collocazione integer NOT NULL DEFAULT nextval('collocazioni_id_collocazione_seq'::regclass),
    sede character varying(255) COLLATE pg_catalog."default",
    regione character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT collocazioni_pkey PRIMARY KEY (id_collocazione)
);

CREATE TABLE IF NOT EXISTS public.comitato_scientifico
(
    id_conferenza integer NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT comitato_scientifico_pkey PRIMARY KEY (id_conferenza, email)
);

CREATE TABLE IF NOT EXISTS public.conferenze_scientifiche
(
    id_conferenza integer NOT NULL DEFAULT nextval('conferenze_id_conferenza_seq'::regclass),
    nome character varying(255) COLLATE pg_catalog."default" NOT NULL,
    data_inizio date,
    data_fine date,
    descrizione character varying(510) COLLATE pg_catalog."default",
    tema character varying(255) COLLATE pg_catalog."default",
    id_collocazione integer,
    CONSTRAINT conferenze_scientifiche_pkey PRIMARY KEY (id_conferenza)
);

CREATE TABLE IF NOT EXISTS public.db_token
(
    db_token character(16) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT db_token_pkey PRIMARY KEY (db_token)
);

CREATE TABLE IF NOT EXISTS public.enti
(
    nome character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT enti_pkey PRIMARY KEY (nome)
);

CREATE TABLE IF NOT EXISTS public.evento
(
    id_evento integer NOT NULL,
    data_ora_inizio timestamp with time zone,
    data_ora_fine timestamp with time zone,
    tipo character varying(255) COLLATE pg_catalog."default",
    descrizione character varying(510) COLLATE pg_catalog."default",
    id_conferenza integer,
    CONSTRAINT evento_pkey PRIMARY KEY (id_evento)
);

CREATE TABLE IF NOT EXISTS public.intervallo
(
    id_intervallo integer NOT NULL,
    data date,
    ora_inizio time with time zone,
    ora_fine time with time zone,
    tipo character varying(255) COLLATE pg_catalog."default",
    id_sessione integer,
    CONSTRAINT intervallo_pkey PRIMARY KEY (id_intervallo)
);

CREATE TABLE IF NOT EXISTS public.interventi
(
    id_intervento integer NOT NULL,
    ora_inizio time without time zone,
    ora_fine time without time zone,
    id_sessione integer,
    descrizione character varying(510) COLLATE pg_catalog."default",
    CONSTRAINT interventi_pkey PRIMARY KEY (id_intervento)
);

CREATE TABLE IF NOT EXISTS public.iscrizioni_conferenze
(
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    id_conferenza integer NOT NULL,
    CONSTRAINT iscrizioni_conferenze_pkey PRIMARY KEY (email, id_conferenza)
);

CREATE TABLE IF NOT EXISTS public.keynote_speaker
(
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    titolo character varying(255) COLLATE pg_catalog."default",
    nome character varying(255) COLLATE pg_catalog."default",
    cognome character varying(255) COLLATE pg_catalog."default",
    afferenza character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT "Keynote Speaker_pkey" PRIMARY KEY (email)
);

CREATE TABLE IF NOT EXISTS public.organizzatore
(
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    titolo character varying(100) COLLATE pg_catalog."default",
    nome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    cognome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    afferenza character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT organizzatori_pkey PRIMARY KEY (email)
);

CREATE TABLE IF NOT EXISTS public.organizzazione
(
    id_conferenza integer NOT NULL,
    ente character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT organizzazione_pkey PRIMARY KEY (id_conferenza, ente)
);

CREATE TABLE IF NOT EXISTS public.partecipanti
(
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    titolo character varying(100) COLLATE pg_catalog."default",
    nome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    cognome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    afferenza character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT partecipanti_pkey PRIMARY KEY (email)
);

CREATE TABLE IF NOT EXISTS public.partecipazione
(
    id_intervento integer NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT partecipazione_pkey PRIMARY KEY (id_intervento, email)
);

CREATE TABLE IF NOT EXISTS public.proposte_bacheca
(
    id_conferenza_bacheca integer NOT NULL DEFAULT nextval('proposte_bacheca_id_conferenza_bacheca_seq'::regclass),
    nome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    descrizione character varying(1000) COLLATE pg_catalog."default" NOT NULL,
    tema character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT proposte_bacheca_pkey PRIMARY KEY (id_conferenza_bacheca),
    CONSTRAINT proposte_bacheca_descrizione_key UNIQUE (descrizione),
    CONSTRAINT proposte_bacheca_nome_key UNIQUE (nome)
);

CREATE TABLE IF NOT EXISTS public.sessioni
(
    id_sessione integer NOT NULL,
    data_inizio date,
    data_fine date,
    coordinatore character varying COLLATE pg_catalog."default" NOT NULL,
    keynote_speaker character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'nessuno'::character varying,
    id_conferenza integer NOT NULL,
    locazione character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT sessione_pkey PRIMARY KEY (id_sessione)
);

CREATE TABLE IF NOT EXISTS public.sponsor
(
    nome character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT sponsor_pkey PRIMARY KEY (nome)
);

CREATE TABLE IF NOT EXISTS public.sponsorizzazione
(
    id_conferenza integer NOT NULL,
    sponsor character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT sponsorizzazione_pkey PRIMARY KEY (id_conferenza, sponsor)
);

CREATE TABLE IF NOT EXISTS public.utenti
(
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    username character varying(20) COLLATE pg_catalog."default" NOT NULL,
    password_user character varying(255) COLLATE pg_catalog."default" NOT NULL,
    admin_status boolean,
    CONSTRAINT utenti_pkey PRIMARY KEY (email),
    CONSTRAINT utenti_username_key UNIQUE (username)
);

ALTER TABLE IF EXISTS public.comitato_scientifico
    ADD CONSTRAINT conferenza_comitato FOREIGN KEY (id_conferenza)
    REFERENCES public.conferenze_scientifiche (id_conferenza) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.comitato_scientifico
    ADD CONSTRAINT organizzatore_comitato FOREIGN KEY (email)
    REFERENCES public.organizzatore (email) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.conferenze_scientifiche
    ADD CONSTRAINT collocazione_conferenza FOREIGN KEY (id_collocazione)
    REFERENCES public.collocazioni (id_collocazione) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_l
    ON public.conferenze_scientifiche(id_collocazione);


ALTER TABLE IF EXISTS public.evento
    ADD CONSTRAINT evento_conferenza FOREIGN KEY (id_conferenza)
    REFERENCES public.conferenze_scientifiche (id_conferenza) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.intervallo
    ADD CONSTRAINT intervallo_sessione FOREIGN KEY (id_sessione)
    REFERENCES public.sessioni (id_sessione) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.interventi
    ADD CONSTRAINT intervalli_sessioni FOREIGN KEY (id_sessione)
    REFERENCES public.sessioni (id_sessione) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.iscrizioni_conferenze
    ADD CONSTRAINT conferenza_iscrizione FOREIGN KEY (id_conferenza)
    REFERENCES public.conferenze_scientifiche (id_conferenza) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.iscrizioni_conferenze
    ADD CONSTRAINT utente_iscrizione FOREIGN KEY (email)
    REFERENCES public.utenti (email) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.keynote_speaker
    ADD CONSTRAINT keynote_enti FOREIGN KEY (afferenza)
    REFERENCES public.enti (nome) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.organizzatore
    ADD CONSTRAINT organizzatore_ente FOREIGN KEY (afferenza)
    REFERENCES public.enti (nome) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.organizzazione
    ADD CONSTRAINT conferenza_organizzazione FOREIGN KEY (id_conferenza)
    REFERENCES public.conferenze_scientifiche (id_conferenza) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.organizzazione
    ADD CONSTRAINT ente_organizzazione FOREIGN KEY (ente)
    REFERENCES public.enti (nome) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.partecipanti
    ADD CONSTRAINT partecipanti_enti FOREIGN KEY (afferenza)
    REFERENCES public.enti (nome) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.partecipazione
    ADD CONSTRAINT partecipazione_interventi FOREIGN KEY (id_intervento)
    REFERENCES public.interventi (id_intervento) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.partecipazione
    ADD CONSTRAINT partecipazione_partecipanti FOREIGN KEY (email)
    REFERENCES public.partecipanti (email) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sessioni
    ADD CONSTRAINT sessione_conferenza FOREIGN KEY (id_conferenza)
    REFERENCES public.conferenze_scientifiche (id_conferenza) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sessioni
    ADD CONSTRAINT sessioni_keynote FOREIGN KEY (keynote_speaker)
    REFERENCES public.keynote_speaker (email) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.sponsorizzazione
    ADD CONSTRAINT conferenze_sponsorizzazione FOREIGN KEY (id_conferenza)
    REFERENCES public.conferenze_scientifiche (id_conferenza) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.sponsorizzazione
    ADD CONSTRAINT sponsor_sponsorizzazione FOREIGN KEY (sponsor)
    REFERENCES public.sponsor (nome) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;

END;